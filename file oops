6.Develop a C++ program using Operator Overloading for overloading Unary minus 

operator. 

#include <iostream>

using namespace std;

class Number {

private:

 int value;

public:

 Number(int val) {

 value = val;

 }

 Number operator-() {

 return Number(-value);

 }

 void display() {

 cout << "Value: " << value << endl;

 }

};

int main() {

 Number num1(10);

 Number num2 = -num1;

 num1.display(); // Output: Value: 10

 num2.display(); // Output: Value: -10
return 0;
}

7.Here is a C++ program that demonstrates multiple inheritance for performing arithmetic 

operations on two numbers:

#include <iostream>

using namespace std;

// Base class for arithmetic operations

class Arithmetic {

public:

 int add(int a, int b) {

 return a + b;

 }

 int subtract(int a, int b) {

 return a - b;

 }

};

// Derived class for multiplication

class Multiplication {

public:

 int multiply(int a, int b) {

 return a * b;

 }

};

// Derived class for division

class Division {

public:

 float divide(float a, float b) {
return a/b;
}
};

// Derived class that inherits from Arithmetic, Multiplication, and Division

class Calculator : public Arithmetic, public Multiplication, public Division {

public:

 void performOperations(int a, int b) {

 cout << "Addition: " << add(a, b) << endl;

 cout << "Subtraction: " << subtract(a, b) << endl;

 cout << "Multiplication: " << multiply(a, b) << endl;

 cout << "Division: " << divide(a, b) << endl;

 }

};

int main() {

 int num1, num2;

 cout << "Enter two numbers: ";

 cin >> num1 >> num2;

 Calculator calculator;

 calculator.performOperations(num1, num2);
return 0;
}

8.Develop a C++ program using Constructor in Derived classes to initialize alpha, beta and 

gamma and display corresponding values. 

#include <iostream>

using namespace std;

class Base {

protected:

int alpha;

public:

Base(int a) {

alpha = a;

cout << "Base class constructor called" << endl;

}
};

class Derived : public Base {

protected:

int beta;

int gamma;

public:

Derived(int a, int b, int c) {

beta = b;

gamma = c;

cout << "Derived class constructor called" << endl;

}

void displayValues() {

cout << "Alpha: " << alpha << endl;

cout << "Beta: " << beta << endl;

cout << "Gamma: " << gamma << endl;
}
};
int main() {

Derived obj(1, 2, 3);

obj.displayValues();

return 0;
}

9.Develop a C++ program to create a text file, check file created or not, if created it will 

write some text into the file and then read the text from the file. 

#include <iostream>

#include <fstream>

using namespace std;

int main() {

// Creating and opening a file

ofstream outfile("example.txt");

// Checking if file was created successfully

if (outfile) {

cout << "File created successfully!" << std::endl;

// Writing some text into the file

outfile << "Hello, world!";

outfile.close();

// Reading the text from the file

ifstream infile("example.txt");

string line;

if (infile) {

cout << "File opened successfully!" << endl;

// Reading the text line by line

while (getline(infile, line)) {

cout << line << endl;

}

infile.close();

} else {

cout << "Error opening file!" << std::endl;

} } else {

cout << "Error creating file!" << std::endl;
} return 0; }


10.Develop a C++ program to write and read time in/from binary file using fstream. 

#include <iostream>

#include <fstream>

#include <ctime>

using namespace std;

void writeTimeToFile(const string& fileName) {

// Open the file in binary mode for writing

ofstream file(fileName, ios::binary);

if (file.is_open()) {

// Get the current time

time_t currentTime = time(nullptr);

// Write the time to the file

file.write((char*)&currentTime, sizeof(time_t));

// Close the file

file.close();

cout << "Time has been written to the file." << endl;

} else {

cout << "Failed to open the file for writing." << endl;

} }

void readTimeFromFile(const string& fileName) {

// Open the file in binary mode for reading

ifstream file(fileName, ios::binary);

if (file.is_open()) {

// Read the time from the file

time_t storedTime;

file.read((char*)&storedTime, sizeof(time_t));

// Check if reading was successful
if(file){
string timeString = ctime(&storedTime);

cout << "Time read from the file: " << timeString << endl;

} else {

cout << "Failed to read the time from the file." << endl;

}

// Close the file

file.close();

} else {

cout << "Failed to open the file for reading." << endl;

}

}

int main() {

string fileName = "time.bin";

// Write the current time to the file

writeTimeToFile(fileName);

// Read and display the time from the file

readTimeFromFile(fileName);

return 0;

}


11. Develop a function which throws a division by zero exception and catch it in catch 

block. Write a C++ program to demonstrate usage of try, catch and throw to handle 

exception.

#include <iostream>

using namespace std;

double divide(int numerator, int denominator) {

if (denominator == 0) {

throw "Division by zero error";

}

return numerator / denominator;

}

int main() {

int numerator, denominator;


cout << "Enter numerator: ";

cin >> numerator;

cout << "Enter denominator: ";

cin >> denominator;

try {

double result = divide(numerator, denominator);

cout << "Result of division: " << result << endl;

} catch (const char* errorMessage) {

cerr << "Error:" << errorMessage << endl;
}
return 0;
}


12.Develop a C++ program that handles array out of bounds exception using C++. 

#include <iostream>

#include <stdexcept>

using namespace std;

int main() {

 try {

 int arr[5] = {1, 2, 3, 4, 5};

 int index = 10; // Out-of-bounds index

 if (index >= 0 && index < 5) {

 cout << "Value at index " << index << ": " << arr[index] << endl;

 } else {

 throw out_of_range("Index is out of bounds!");

 }

 } catch (const out_of_range& e) {

 cout << "Exception caught: " << e.what() << endl;
}
return 0;
}